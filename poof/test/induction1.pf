union Nat {
  zero;
  suc(Nat);
}

function add(Nat,Nat) -> Nat {
  add(zero, m) = m;
  add(suc(n), m) = suc(add(n, m));
}

theorem add_zero: all n:Nat. add(n, zero) = n
proof
  induction Nat
  case zero {
    have add(zero, zero) = zero by reflexive
  }
  case suc(n') {
    transitive have add(suc(n'), zero) = suc(add(n', zero)) by reflexive
               have suc(add(n', zero)) = suc(n')
	          by rewrite goal with IH then reflexive
  }
end

