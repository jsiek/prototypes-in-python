union Nat {
  zero;
  suc(Nat);
}

function add(Nat) Nat -> Nat {
  case zero: λ m { m }
  case suc(rec):
    λ m { suc(rec(m)) }
}

theorem add_zero_one: add(zero)(suc(zero)) = suc(zero)
proof
  reflexive
end

theorem add_one_zero: add(suc(zero))(zero) = suc(zero)
proof
  reflexive
end